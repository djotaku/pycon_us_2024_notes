Keynote: Jay Miller

Founder of Black Python Devs

First interaction with Python community (but really stack overflow) was "your code isn't pythonic"

Second interaction was "your project is so cool, tell me more about it"

Representation very important to see themself in leadership, keynote speaker, etc 

Speaker happy to say that that they are not the first black python keynote speaker - awesome to be the fifth instead of first for once

In 2022 only counted 12 attendees, speakers, conf expo hall other black participants

Ultimately, their goal was to make a A something that would be a Wakanda for Python.

What can the Python community be more approachable to the black community?
We try...

As of yesterday they are a non-profit supported by the Gnome Foundation

were able to use $1500 to get 4 black python devs community leaders to their first Pycon US.


=======================

1100 - Mock It Till You Make It: how to verify your external mocks without ever leaving unittest

how tests help us write better code - detect code smells; Also easier ot understand, maintain, and debug.

to make sure on the same page: Unit testing - we are testing the smallest functions of code individually and independently.

a good test should be repeatable and deterministic - if it passes, it should always pass no matter time of day, etc.

a nice long name is great - will help make sure that it serves as documentatoin for devs new to the codebase

part of what's bad/hard about mocking:
- can flal out of sync with reality which cna render the unit tests unrealable and meaningless.

See slide for Best practices

Ocasisionally make sure your mocks are still accurate

unittest.skip(reason) and skip conditionals. You can use these for example to run with mocks in dev, but not in prod.

autospec is good for making sure your mocks are matching the object represented.

note to self: post-talk to more research on the mock features described here.



========================

1145 - Flask-Con: Building Single Page Apps w/Flask - Adam Englander

Used Quart since that's an async Flask

To keep app from getting out of sync - want to just run on one server. Not a fornt end server and a backend server, etc. May be needed in the future if teh app gets huge - eg maybe want to split into microservices, etc. But that day is not today.

App Overview slide:
Flask/Quart backend with a React Frontend

Managed by Vite because the team is not Javascript experts - this means they need less Javascript expertise to make their app work.

using flask to serve static SPA content leads to easier integration testing. Speaker's company is very heavy on integration testing and TDD.

What they lose with this config is in-app reload. 

project structure: while simplest is to have front and back end directories, it can cause some issues like build dependencies if using Docker.

project sturcture: They ended up having the python stuff in the project root and the frontend stuff in a frontend directory.

Used react-typescript. They use typed python, so no big deal for the team.

=========================

1230 - Ruff: An Extremely Fast Python Linter and Code Formatter, Written in Rust



=======================

1400 - Continuous Deployment and Release of Django Apps

=======================

1445 - Pydantic Power-up: Performance Tips for Lightning-Fast Python Applications

======================

1530 - Procedurally Generated Monsters! A complete example of Python game development

======================

1630 - Interactive Software Documentation, with PyScript

======================

1715 - Build in-browser 3D experiences with WebGL and PyScript

======================

1800 - Lightning Talks
