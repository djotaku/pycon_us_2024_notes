Keynote: Jay Miller

Founder of Black Python Devs

First interaction with Python community (but really stack overflow) was "your code isn't pythonic"

Second interaction was "your project is so cool, tell me more about it"

Representation very important to see themself in leadership, keynote speaker, etc 

Speaker happy to say that that they are not the first black python keynote speaker - awesome to be the fifth instead of first for once

In 2022 only counted 12 attendees, speakers, conf expo hall other black participants

Ultimately, their goal was to make a A something that would be a Wakanda for Python.

What can the Python community be more approachable to the black community?
We try...

As of yesterday they are a non-profit supported by the Gnome Foundation

were able to use $1500 to get 4 black python devs community leaders to their first Pycon US.


=======================

1100 - Mock It Till You Make It: how to verify your external mocks without ever leaving unittest

how tests help us write better code - detect code smells; Also easier ot understand, maintain, and debug.

to make sure on the same page: Unit testing - we are testing the smallest functions of code individually and independently.

a good test should be repeatable and deterministic - if it passes, it should always pass no matter time of day, etc.

a nice long name is great - will help make sure that it serves as documentatoin for devs new to the codebase

part of what's bad/hard about mocking:
- can flal out of sync with reality which cna render the unit tests unrealable and meaningless.

See slide for Best practices

Ocasisionally make sure your mocks are still accurate

unittest.skip(reason) and skip conditionals. You can use these for example to run with mocks in dev, but not in prod.

autospec is good for making sure your mocks are matching the object represented.

note to self: post-talk to more research on the mock features described here.



========================

1145 - Flask-Con: Building Single Page Apps w/Flask - Adam Englander

Used Quart since that's an async Flask

To keep app from getting out of sync - want to just run on one server. Not a fornt end server and a backend server, etc. May be needed in the future if teh app gets huge - eg maybe want to split into microservices, etc. But that day is not today.

App Overview slide:
Flask/Quart backend with a React Frontend

Managed by Vite because the team is not Javascript experts - this means they need less Javascript expertise to make their app work.

using flask to serve static SPA content leads to easier integration testing. Speaker's company is very heavy on integration testing and TDD.

What they lose with this config is in-app reload. 

project structure: while simplest is to have front and back end directories, it can cause some issues like build dependencies if using Docker.

project sturcture: They ended up having the python stuff in the project root and the frontend stuff in a frontend directory.

Used react-typescript. They use typed python, so no big deal for the team.

=========================

1230 - Ruff: An Extremely Fast Python Linter and Code Formatter, Written in Rust

The bulk of the talk is about what makes Ruff so fast. 

see slide: "From source code to diagnostics"

talks about how it creates an AST (abstract syntax tree)

so what makes Ruff fast?

1. Rust - written in pure Rust (300,000 LOC). Gives a fast baseline. Also Rust gives tools to write really, really fast programs - allows for more optimization than other programming languages. While it's a strength of python that the programmer doesn't have to care about memory - Rust forces you to think about whether you're writing on the stack or heap.
2. Deduplication. For example, without ruff you might need to use Pyflakes, Pycodestyle, and pydocstyle. Each tool has to tokenize the code, create its own AST (or however the particular tool does it). But Ruff is only doing this once. 
3. Concurrency/parallelism - Rust enables "fearless concurrency" - the compiler doesn't let you write most concurrency bugs. So Ruff can analyze all your files in parallel. 
4. Culture - performance is everyone's problem. Small wins add up. Follow your curiosity. Constant learning. Ground decisions in data. 

next few slides are a walk-through of some optimizaitons they've done.

interesting lesson that going from a Regex, to parsing manually (for the #noqa) made Ruff 1-2% faster. So more "elegant" code isn't necessarily better when it comes to optimization.

for machines offsets was a better representation of where something is in the file compared to rows/cols - which is what humans prefer

=======================

1400 - Continuous Deployment and Release of Django Apps

In a typical situation when you make an update you have to do a server restart which might lead to an interruption for site visitors.

With the database you might have database migrations. How to do this without downtime?

With k8s you have a liveness proe and a readiness prove (is it ready to serve incoming traffic?)

One way to get around the server restart issue is to have a few pods with a rolling update policy. This way there's always at least one serer ready to serve requests

part of what you need to do is make sure the right server is hitting the right version of the database. But they might be updated separately. 

there's a library you can use django-safemigrate (look up more details)

Recc: first add new table to database then add new model. (less breakage that way)

Recc: create new table colum. Then upgrade the django app to need that model. What if field is non-nullable? First create a fake nullable col, then update app, then add the new field that is non-nullable. Then you'll need a script to fix the old data to all have data in this new column

basically sometimes you need an intermediate version that is compatile with both versoins of the database.

To remove a field, just do the opposite of above.

Recc for renaming a field: Combine creating and deletin a field

=======================

1445 - Pydantic Power-up: Performance Tips for Lightning-Fast Python Applications

good tips for better use of type hints with pydantic (see slides)


trying to keep as much in Rust as possible before having it turn into Python objects

======================

1530 - Procedurally Generated Monsters! A complete example of Python game development

ended up not attending

======================

1630 - Interactive Software Documentation, with PyScript

obviously you want good documentation - it invites new devs in if you're doing an open source project. But also helps all the devs on the project

examples of good docs: django, pyscript, pytorch, sci-kit learn

what pyscript gives you over these exmaples is teh ability to have interactive documentation.



======================

1800 - Lightning Talks

I attended and also spoke, so could not take notes

=====
tip from Pycharm team in the vendor area - search for productivity in the everywhere search and it will give tons of tips. 
