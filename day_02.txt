Diversity and Inclusion Panel

- djangogirls group was introduction to python for one of the panelists
- discussion about how keeping the community together during COVID was hard
- discussion about how money can be key in keeping community going

============

keynote: Simon Willison

simonwillison.net

Most of the AI companies are very secretive about their training data sources. Only Meta has been open about the source.

just because a tool is flawed doesn't mean it's not useful!

Usually an "open source" model is not. There are lots of little clauses that restrict the way it can be used.

Function calling tools in a loop. I'd heard this before, but it bears repeating - you have to tell the LLM to do things like use calculators in order to get them closer to intelligence instead of just predictively giving the next word

the above is easy to do in Python according to speaker. 

Prompt injection - the security issue of LLMs. According to speaker - we currently don't know how to keep this from happening. (Similar to SQL injection in that you are combining data and instructions in the same data stream"

to help prevent - never mix untrusted text with access to tools

uses ML/AI as an enable for side projects

"AI spoken word counter" - incredible live demo during conference

Speaker once again reiterates that part of what AI/ML helps with is being able to knock out "side quests" quickly and get him to try out projects they might otherwise not do because it would take too long to learn all the libraries, etc.

Structured Data Extraction - using AI/ML as part of journalism. Example - taking unstructured data (like police reports or PSF board reports) and putting it into a form that can be used by computers - eg put into a database.

The challenge of the above is that while it's faster than manual generation, the human still needs to do some checking of the data.

speaker suggests not calling it Generative AI, but Transformative AI



============

1030 - Friends don't let friends package alone

===========

1115 - Making Python Safer than Ever

===========

1200 - Having fun with pydantic and pattern matching


============

1330 - How Python Harnesses Rust through PyO3


===========

1430 - Eternal sunshine of the spotless development environment

==========

1515 - Python and SQL: Better Together, Powered by DuckDB

=========

1615 - Talks: Creative Coding with py5, the Python version of Processing

==========

1700 - Talks: Demystifying AsyncIO: Building Your Own Event Loop in Python

==========

1745 - Lightning Talks
